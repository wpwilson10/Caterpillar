# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import caterpillar_pb2 as caterpillar__pb2


class CaterpillarStub(object):
    """Defintion for Caterpillar python applications
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Newspaper = channel.unary_unary(
                '/caterpillar.Caterpillar/Newspaper',
                request_serializer=caterpillar__pb2.NewspaperRequest.SerializeToString,
                response_deserializer=caterpillar__pb2.NewspaperReply.FromString,
                )
        self.Sentences = channel.unary_unary(
                '/caterpillar.Caterpillar/Sentences',
                request_serializer=caterpillar__pb2.TextRequest.SerializeToString,
                response_deserializer=caterpillar__pb2.SentenceReply.FromString,
                )
        self.Summary = channel.unary_unary(
                '/caterpillar.Caterpillar/Summary',
                request_serializer=caterpillar__pb2.TextRequest.SerializeToString,
                response_deserializer=caterpillar__pb2.SummaryReply.FromString,
                )


class CaterpillarServicer(object):
    """Defintion for Caterpillar python applications
    """

    def Newspaper(self, request, context):
        """Sends a link for newspaper3k extraction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sentences(self, request, context):
        """Splits the text string into sentences
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Summary(self, request, context):
        """Returns a text summary and keywords
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CaterpillarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Newspaper': grpc.unary_unary_rpc_method_handler(
                    servicer.Newspaper,
                    request_deserializer=caterpillar__pb2.NewspaperRequest.FromString,
                    response_serializer=caterpillar__pb2.NewspaperReply.SerializeToString,
            ),
            'Sentences': grpc.unary_unary_rpc_method_handler(
                    servicer.Sentences,
                    request_deserializer=caterpillar__pb2.TextRequest.FromString,
                    response_serializer=caterpillar__pb2.SentenceReply.SerializeToString,
            ),
            'Summary': grpc.unary_unary_rpc_method_handler(
                    servicer.Summary,
                    request_deserializer=caterpillar__pb2.TextRequest.FromString,
                    response_serializer=caterpillar__pb2.SummaryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'caterpillar.Caterpillar', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Caterpillar(object):
    """Defintion for Caterpillar python applications
    """

    @staticmethod
    def Newspaper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/caterpillar.Caterpillar/Newspaper',
            caterpillar__pb2.NewspaperRequest.SerializeToString,
            caterpillar__pb2.NewspaperReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sentences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/caterpillar.Caterpillar/Sentences',
            caterpillar__pb2.TextRequest.SerializeToString,
            caterpillar__pb2.SentenceReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Summary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/caterpillar.Caterpillar/Summary',
            caterpillar__pb2.TextRequest.SerializeToString,
            caterpillar__pb2.SummaryReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
