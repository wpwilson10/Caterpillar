# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import caterpillar_pb2 as caterpillar__pb2


class NewspaperStub(object):
    """Defintion for newspaper3k application
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Request = channel.unary_unary(
                '/caterpillar.Newspaper/Request',
                request_serializer=caterpillar__pb2.NewspaperRequest.SerializeToString,
                response_deserializer=caterpillar__pb2.NewspaperReply.FromString,
                )


class NewspaperServicer(object):
    """Defintion for newspaper3k application
    """

    def Request(self, request, context):
        """Sends a link for newspaper3k extraction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NewspaperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Request': grpc.unary_unary_rpc_method_handler(
                    servicer.Request,
                    request_deserializer=caterpillar__pb2.NewspaperRequest.FromString,
                    response_serializer=caterpillar__pb2.NewspaperReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'caterpillar.Newspaper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Newspaper(object):
    """Defintion for newspaper3k application
    """

    @staticmethod
    def Request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/caterpillar.Newspaper/Request',
            caterpillar__pb2.NewspaperRequest.SerializeToString,
            caterpillar__pb2.NewspaperReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class TextStub(object):
    """Defintion for text cleanup and summarization application
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sentences = channel.unary_unary(
                '/caterpillar.Text/Sentences',
                request_serializer=caterpillar__pb2.TextRequest.SerializeToString,
                response_deserializer=caterpillar__pb2.SentenceReply.FromString,
                )


class TextServicer(object):
    """Defintion for text cleanup and summarization application
    """

    def Sentences(self, request, context):
        """Splits the text string into sentences
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sentences': grpc.unary_unary_rpc_method_handler(
                    servicer.Sentences,
                    request_deserializer=caterpillar__pb2.TextRequest.FromString,
                    response_serializer=caterpillar__pb2.SentenceReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'caterpillar.Text', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Text(object):
    """Defintion for text cleanup and summarization application
    """

    @staticmethod
    def Sentences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/caterpillar.Text/Sentences',
            caterpillar__pb2.TextRequest.SerializeToString,
            caterpillar__pb2.SentenceReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
