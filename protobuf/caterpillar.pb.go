// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: caterpillar.proto

package protobuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message contains the url link to extract
type NewspaperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *NewspaperRequest) Reset() {
	*x = NewspaperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caterpillar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewspaperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewspaperRequest) ProtoMessage() {}

func (x *NewspaperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caterpillar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewspaperRequest.ProtoReflect.Descriptor instead.
func (*NewspaperRequest) Descriptor() ([]byte, []int) {
	return file_caterpillar_proto_rawDescGZIP(), []int{0}
}

func (x *NewspaperRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// The response message contains the newspaper3k output
type NewspaperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link      string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text      string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Canonical string   `protobuf:"bytes,4,opt,name=canonical,proto3" json:"canonical,omitempty"`
	Pubdate   string   `protobuf:"bytes,5,opt,name=pubdate,proto3" json:"pubdate,omitempty"`
	Authors   []string `protobuf:"bytes,6,rep,name=authors,proto3" json:"authors,omitempty"`
}

func (x *NewspaperReply) Reset() {
	*x = NewspaperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caterpillar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewspaperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewspaperReply) ProtoMessage() {}

func (x *NewspaperReply) ProtoReflect() protoreflect.Message {
	mi := &file_caterpillar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewspaperReply.ProtoReflect.Descriptor instead.
func (*NewspaperReply) Descriptor() ([]byte, []int) {
	return file_caterpillar_proto_rawDescGZIP(), []int{1}
}

func (x *NewspaperReply) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *NewspaperReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewspaperReply) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *NewspaperReply) GetCanonical() string {
	if x != nil {
		return x.Canonical
	}
	return ""
}

func (x *NewspaperReply) GetPubdate() string {
	if x != nil {
		return x.Pubdate
	}
	return ""
}

func (x *NewspaperReply) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

// The request message contains text string to process
type TextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextRequest) Reset() {
	*x = TextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caterpillar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextRequest) ProtoMessage() {}

func (x *TextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caterpillar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextRequest.ProtoReflect.Descriptor instead.
func (*TextRequest) Descriptor() ([]byte, []int) {
	return file_caterpillar_proto_rawDescGZIP(), []int{2}
}

func (x *TextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// The response message containing an array of sentences
type SentenceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences []string `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
}

func (x *SentenceReply) Reset() {
	*x = SentenceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caterpillar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceReply) ProtoMessage() {}

func (x *SentenceReply) ProtoReflect() protoreflect.Message {
	mi := &file_caterpillar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceReply.ProtoReflect.Descriptor instead.
func (*SentenceReply) Descriptor() ([]byte, []int) {
	return file_caterpillar_proto_rawDescGZIP(), []int{3}
}

func (x *SentenceReply) GetSentences() []string {
	if x != nil {
		return x.Sentences
	}
	return nil
}

// The response message containing summarized text and keywords
type SummaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary  string   `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Keywords []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *SummaryReply) Reset() {
	*x = SummaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caterpillar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryReply) ProtoMessage() {}

func (x *SummaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_caterpillar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryReply.ProtoReflect.Descriptor instead.
func (*SummaryReply) Descriptor() ([]byte, []int) {
	return file_caterpillar_proto_rawDescGZIP(), []int{4}
}

func (x *SummaryReply) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *SummaryReply) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

var File_caterpillar_proto protoreflect.FileDescriptor

var file_caterpillar_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72,
	0x22, 0x26, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77,
	0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2d,
	0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x44, 0x0a,
	0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x32, 0xdf, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c,
	0x6c, 0x61, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x12, 0x1d, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18,
	0x2e, 0x63, 0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x72,
	0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x70, 0x77, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x31, 0x30, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x72, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_caterpillar_proto_rawDescOnce sync.Once
	file_caterpillar_proto_rawDescData = file_caterpillar_proto_rawDesc
)

func file_caterpillar_proto_rawDescGZIP() []byte {
	file_caterpillar_proto_rawDescOnce.Do(func() {
		file_caterpillar_proto_rawDescData = protoimpl.X.CompressGZIP(file_caterpillar_proto_rawDescData)
	})
	return file_caterpillar_proto_rawDescData
}

var file_caterpillar_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_caterpillar_proto_goTypes = []interface{}{
	(*NewspaperRequest)(nil), // 0: caterpillar.NewspaperRequest
	(*NewspaperReply)(nil),   // 1: caterpillar.NewspaperReply
	(*TextRequest)(nil),      // 2: caterpillar.TextRequest
	(*SentenceReply)(nil),    // 3: caterpillar.SentenceReply
	(*SummaryReply)(nil),     // 4: caterpillar.SummaryReply
}
var file_caterpillar_proto_depIdxs = []int32{
	0, // 0: caterpillar.Caterpillar.Newspaper:input_type -> caterpillar.NewspaperRequest
	2, // 1: caterpillar.Caterpillar.Sentences:input_type -> caterpillar.TextRequest
	2, // 2: caterpillar.Caterpillar.Summary:input_type -> caterpillar.TextRequest
	1, // 3: caterpillar.Caterpillar.Newspaper:output_type -> caterpillar.NewspaperReply
	3, // 4: caterpillar.Caterpillar.Sentences:output_type -> caterpillar.SentenceReply
	4, // 5: caterpillar.Caterpillar.Summary:output_type -> caterpillar.SummaryReply
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_caterpillar_proto_init() }
func file_caterpillar_proto_init() {
	if File_caterpillar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_caterpillar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewspaperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caterpillar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewspaperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caterpillar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caterpillar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caterpillar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_caterpillar_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_caterpillar_proto_goTypes,
		DependencyIndexes: file_caterpillar_proto_depIdxs,
		MessageInfos:      file_caterpillar_proto_msgTypes,
	}.Build()
	File_caterpillar_proto = out.File
	file_caterpillar_proto_rawDesc = nil
	file_caterpillar_proto_goTypes = nil
	file_caterpillar_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CaterpillarClient is the client API for Caterpillar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaterpillarClient interface {
	// Sends a link for newspaper3k extraction
	Newspaper(ctx context.Context, in *NewspaperRequest, opts ...grpc.CallOption) (*NewspaperReply, error)
	// Splits the text string into sentences
	Sentences(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SentenceReply, error)
	// Returns a text summary and keywords
	Summary(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SummaryReply, error)
}

type caterpillarClient struct {
	cc grpc.ClientConnInterface
}

func NewCaterpillarClient(cc grpc.ClientConnInterface) CaterpillarClient {
	return &caterpillarClient{cc}
}

func (c *caterpillarClient) Newspaper(ctx context.Context, in *NewspaperRequest, opts ...grpc.CallOption) (*NewspaperReply, error) {
	out := new(NewspaperReply)
	err := c.cc.Invoke(ctx, "/caterpillar.Caterpillar/Newspaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caterpillarClient) Sentences(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SentenceReply, error) {
	out := new(SentenceReply)
	err := c.cc.Invoke(ctx, "/caterpillar.Caterpillar/Sentences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caterpillarClient) Summary(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*SummaryReply, error) {
	out := new(SummaryReply)
	err := c.cc.Invoke(ctx, "/caterpillar.Caterpillar/Summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaterpillarServer is the server API for Caterpillar service.
type CaterpillarServer interface {
	// Sends a link for newspaper3k extraction
	Newspaper(context.Context, *NewspaperRequest) (*NewspaperReply, error)
	// Splits the text string into sentences
	Sentences(context.Context, *TextRequest) (*SentenceReply, error)
	// Returns a text summary and keywords
	Summary(context.Context, *TextRequest) (*SummaryReply, error)
}

// UnimplementedCaterpillarServer can be embedded to have forward compatible implementations.
type UnimplementedCaterpillarServer struct {
}

func (*UnimplementedCaterpillarServer) Newspaper(context.Context, *NewspaperRequest) (*NewspaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Newspaper not implemented")
}
func (*UnimplementedCaterpillarServer) Sentences(context.Context, *TextRequest) (*SentenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sentences not implemented")
}
func (*UnimplementedCaterpillarServer) Summary(context.Context, *TextRequest) (*SummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}

func RegisterCaterpillarServer(s *grpc.Server, srv CaterpillarServer) {
	s.RegisterService(&_Caterpillar_serviceDesc, srv)
}

func _Caterpillar_Newspaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewspaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaterpillarServer).Newspaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caterpillar.Caterpillar/Newspaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaterpillarServer).Newspaper(ctx, req.(*NewspaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Caterpillar_Sentences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaterpillarServer).Sentences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caterpillar.Caterpillar/Sentences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaterpillarServer).Sentences(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Caterpillar_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaterpillarServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caterpillar.Caterpillar/Summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaterpillarServer).Summary(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Caterpillar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "caterpillar.Caterpillar",
	HandlerType: (*CaterpillarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Newspaper",
			Handler:    _Caterpillar_Newspaper_Handler,
		},
		{
			MethodName: "Sentences",
			Handler:    _Caterpillar_Sentences_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _Caterpillar_Summary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caterpillar.proto",
}
